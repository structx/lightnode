// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/k2/v1/k2_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// K2ServiceClient is the client API for K2Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type K2ServiceClient interface {
	SubmitBlock(ctx context.Context, in *NewBlock, opts ...grpc.CallOption) (*Block, error)
}

type k2ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewK2ServiceClient(cc grpc.ClientConnInterface) K2ServiceClient {
	return &k2ServiceClient{cc}
}

func (c *k2ServiceClient) SubmitBlock(ctx context.Context, in *NewBlock, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/k2.v1.K2Service/SubmitBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K2ServiceServer is the server API for K2Service service.
// All implementations must embed UnimplementedK2ServiceServer
// for forward compatibility
type K2ServiceServer interface {
	SubmitBlock(context.Context, *NewBlock) (*Block, error)
	mustEmbedUnimplementedK2ServiceServer()
}

// UnimplementedK2ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedK2ServiceServer struct {
}

func (UnimplementedK2ServiceServer) SubmitBlock(context.Context, *NewBlock) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (UnimplementedK2ServiceServer) mustEmbedUnimplementedK2ServiceServer() {}

// UnsafeK2ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to K2ServiceServer will
// result in compilation errors.
type UnsafeK2ServiceServer interface {
	mustEmbedUnimplementedK2ServiceServer()
}

func RegisterK2ServiceServer(s grpc.ServiceRegistrar, srv K2ServiceServer) {
	s.RegisterService(&K2Service_ServiceDesc, srv)
}

func _K2Service_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K2ServiceServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k2.v1.K2Service/SubmitBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K2ServiceServer).SubmitBlock(ctx, req.(*NewBlock))
	}
	return interceptor(ctx, in, info, handler)
}

// K2Service_ServiceDesc is the grpc.ServiceDesc for K2Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var K2Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "k2.v1.K2Service",
	HandlerType: (*K2ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBlock",
			Handler:    _K2Service_SubmitBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/k2/v1/k2_service.proto",
}
