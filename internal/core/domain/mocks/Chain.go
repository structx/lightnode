// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/structx/lightnode/internal/core/domain"
)

// Chain is an autogenerated mock type for the Chain type
type Chain struct {
	mock.Mock
}

type Chain_Expecter struct {
	mock *mock.Mock
}

func (_m *Chain) EXPECT() *Chain_Expecter {
	return &Chain_Expecter{mock: &_m.Mock}
}

// AddBlock provides a mock function with given fields: _a0
func (_m *Chain) AddBlock(_a0 domain.Block) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Block) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Chain_AddBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBlock'
type Chain_AddBlock_Call struct {
	*mock.Call
}

// AddBlock is a helper method to define mock.On call
//   - _a0 domain.Block
func (_e *Chain_Expecter) AddBlock(_a0 interface{}) *Chain_AddBlock_Call {
	return &Chain_AddBlock_Call{Call: _e.mock.On("AddBlock", _a0)}
}

func (_c *Chain_AddBlock_Call) Run(run func(_a0 domain.Block)) *Chain_AddBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Block))
	})
	return _c
}

func (_c *Chain_AddBlock_Call) Return(_a0 error) *Chain_AddBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Chain_AddBlock_Call) RunAndReturn(run func(domain.Block) error) *Chain_AddBlock_Call {
	_c.Call.Return(run)
	return _c
}

// AddTransaction provides a mock function with given fields: _a0
func (_m *Chain) AddTransaction(_a0 *domain.Transaction) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Transaction) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Chain_AddTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTransaction'
type Chain_AddTransaction_Call struct {
	*mock.Call
}

// AddTransaction is a helper method to define mock.On call
//   - _a0 *domain.Transaction
func (_e *Chain_Expecter) AddTransaction(_a0 interface{}) *Chain_AddTransaction_Call {
	return &Chain_AddTransaction_Call{Call: _e.mock.On("AddTransaction", _a0)}
}

func (_c *Chain_AddTransaction_Call) Run(run func(_a0 *domain.Transaction)) *Chain_AddTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Transaction))
	})
	return _c
}

func (_c *Chain_AddTransaction_Call) Return(_a0 error) *Chain_AddTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Chain_AddTransaction_Call) RunAndReturn(run func(*domain.Transaction) error) *Chain_AddTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockByHash provides a mock function with given fields: _a0
func (_m *Chain) GetBlockByHash(_a0 string) (*domain.Block, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByHash")
	}

	var r0 *domain.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Block, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Block); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Chain_GetBlockByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockByHash'
type Chain_GetBlockByHash_Call struct {
	*mock.Call
}

// GetBlockByHash is a helper method to define mock.On call
//   - _a0 string
func (_e *Chain_Expecter) GetBlockByHash(_a0 interface{}) *Chain_GetBlockByHash_Call {
	return &Chain_GetBlockByHash_Call{Call: _e.mock.On("GetBlockByHash", _a0)}
}

func (_c *Chain_GetBlockByHash_Call) Run(run func(_a0 string)) *Chain_GetBlockByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Chain_GetBlockByHash_Call) Return(_a0 *domain.Block, _a1 error) *Chain_GetBlockByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Chain_GetBlockByHash_Call) RunAndReturn(run func(string) (*domain.Block, error)) *Chain_GetBlockByHash_Call {
	_c.Call.Return(run)
	return _c
}

// Iter provides a mock function with given fields:
func (_m *Chain) Iter() domain.Iterator {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Iter")
	}

	var r0 domain.Iterator
	if rf, ok := ret.Get(0).(func() domain.Iterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Iterator)
		}
	}

	return r0
}

// Chain_Iter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Iter'
type Chain_Iter_Call struct {
	*mock.Call
}

// Iter is a helper method to define mock.On call
func (_e *Chain_Expecter) Iter() *Chain_Iter_Call {
	return &Chain_Iter_Call{Call: _e.mock.On("Iter")}
}

func (_c *Chain_Iter_Call) Run(run func()) *Chain_Iter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Chain_Iter_Call) Return(_a0 domain.Iterator) *Chain_Iter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Chain_Iter_Call) RunAndReturn(run func() domain.Iterator) *Chain_Iter_Call {
	_c.Call.Return(run)
	return _c
}

// NewChain creates a new instance of Chain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChain(t interface {
	mock.TestingT
	Cleanup(func())
}) *Chain {
	mock := &Chain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
