// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/structx/lightnode/internal/core/domain"
)

// SimpleService is an autogenerated mock type for the SimpleService type
type SimpleService struct {
	mock.Mock
}

type SimpleService_Expecter struct {
	mock *mock.Mock
}

func (_m *SimpleService) EXPECT() *SimpleService_Expecter {
	return &SimpleService_Expecter{mock: &_m.Mock}
}

// PaginateBlocks provides a mock function with given fields: ctx, limit, offset
func (_m *SimpleService) PaginateBlocks(ctx context.Context, limit int64, offset int64) ([]*domain.Block, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for PaginateBlocks")
	}

	var r0 []*domain.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]*domain.Block, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []*domain.Block); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimpleService_PaginateBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PaginateBlocks'
type SimpleService_PaginateBlocks_Call struct {
	*mock.Call
}

// PaginateBlocks is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int64
//   - offset int64
func (_e *SimpleService_Expecter) PaginateBlocks(ctx interface{}, limit interface{}, offset interface{}) *SimpleService_PaginateBlocks_Call {
	return &SimpleService_PaginateBlocks_Call{Call: _e.mock.On("PaginateBlocks", ctx, limit, offset)}
}

func (_c *SimpleService_PaginateBlocks_Call) Run(run func(ctx context.Context, limit int64, offset int64)) *SimpleService_PaginateBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *SimpleService_PaginateBlocks_Call) Return(_a0 []*domain.Block, _a1 error) *SimpleService_PaginateBlocks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SimpleService_PaginateBlocks_Call) RunAndReturn(run func(context.Context, int64, int64) ([]*domain.Block, error)) *SimpleService_PaginateBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// QueryBlockByHash provides a mock function with given fields: ctx, hash
func (_m *SimpleService) QueryBlockByHash(ctx context.Context, hash []byte) (*domain.Block, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for QueryBlockByHash")
	}

	var r0 *domain.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (*domain.Block, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) *domain.Block); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimpleService_QueryBlockByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryBlockByHash'
type SimpleService_QueryBlockByHash_Call struct {
	*mock.Call
}

// QueryBlockByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash []byte
func (_e *SimpleService_Expecter) QueryBlockByHash(ctx interface{}, hash interface{}) *SimpleService_QueryBlockByHash_Call {
	return &SimpleService_QueryBlockByHash_Call{Call: _e.mock.On("QueryBlockByHash", ctx, hash)}
}

func (_c *SimpleService_QueryBlockByHash_Call) Run(run func(ctx context.Context, hash []byte)) *SimpleService_QueryBlockByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *SimpleService_QueryBlockByHash_Call) Return(_a0 *domain.Block, _a1 error) *SimpleService_QueryBlockByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SimpleService_QueryBlockByHash_Call) RunAndReturn(run func(context.Context, []byte) (*domain.Block, error)) *SimpleService_QueryBlockByHash_Call {
	_c.Call.Return(run)
	return _c
}

// NewSimpleService creates a new instance of SimpleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSimpleService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SimpleService {
	mock := &SimpleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
